// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CellulaLife")));
bytes32 constant CellulaLifeTableId = _tableId;

struct CellulaLifeData {
  uint8 viewRange;
  uint8 attack;
  string moveRule;
}

library CellulaLife {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "viewRange";
    _fieldNames[1] = "attack";
    _fieldNames[2] = "moveRule";
    return ("CellulaLife", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get viewRange */
  function getViewRange(uint256 tokenId) internal view returns (uint8 viewRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get viewRange (using the specified store) */
  function getViewRange(IStore _store, uint256 tokenId) internal view returns (uint8 viewRange) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set viewRange */
  function setViewRange(uint256 tokenId, uint8 viewRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((viewRange)));
  }

  /** Set viewRange (using the specified store) */
  function setViewRange(IStore _store, uint256 tokenId, uint8 viewRange) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((viewRange)));
  }

  /** Get attack */
  function getAttack(uint256 tokenId) internal view returns (uint8 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get attack (using the specified store) */
  function getAttack(IStore _store, uint256 tokenId) internal view returns (uint8 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set attack */
  function setAttack(uint256 tokenId, uint8 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((attack)));
  }

  /** Set attack (using the specified store) */
  function setAttack(IStore _store, uint256 tokenId, uint8 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((attack)));
  }

  /** Get moveRule */
  function getMoveRule(uint256 tokenId) internal view returns (string memory moveRule) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Get moveRule (using the specified store) */
  function getMoveRule(IStore _store, uint256 tokenId) internal view returns (string memory moveRule) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Set moveRule */
  function setMoveRule(uint256 tokenId, string memory moveRule) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((moveRule)));
  }

  /** Set moveRule (using the specified store) */
  function setMoveRule(IStore _store, uint256 tokenId, string memory moveRule) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 2, bytes((moveRule)));
  }

  /** Get the length of moveRule */
  function lengthMoveRule(uint256 tokenId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of moveRule (using the specified store) */
  function lengthMoveRule(IStore _store, uint256 tokenId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of moveRule (unchecked, returns invalid data if index overflows) */
  function getItemMoveRule(uint256 tokenId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of moveRule (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemMoveRule(IStore _store, uint256 tokenId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to moveRule */
  function pushMoveRule(uint256 tokenId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to moveRule (using the specified store) */
  function pushMoveRule(IStore _store, uint256 tokenId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from moveRule */
  function popMoveRule(uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from moveRule (using the specified store) */
  function popMoveRule(IStore _store, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of moveRule at `_index` */
  function updateMoveRule(uint256 tokenId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of moveRule (using the specified store) at `_index` */
  function updateMoveRule(IStore _store, uint256 tokenId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(uint256 tokenId) internal view returns (CellulaLifeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 tokenId) internal view returns (CellulaLifeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint256 tokenId, uint8 viewRange, uint8 attack, string memory moveRule) internal {
    bytes memory _data = encode(viewRange, attack, moveRule);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint256 tokenId, uint8 viewRange, uint8 attack, string memory moveRule) internal {
    bytes memory _data = encode(viewRange, attack, moveRule);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 tokenId, CellulaLifeData memory _table) internal {
    set(tokenId, _table.viewRange, _table.attack, _table.moveRule);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 tokenId, CellulaLifeData memory _table) internal {
    set(_store, tokenId, _table.viewRange, _table.attack, _table.moveRule);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CellulaLifeData memory _table) {
    // 2 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 2));

    _table.viewRange = (uint8(Bytes.slice1(_blob, 0)));

    _table.attack = (uint8(Bytes.slice1(_blob, 1)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 2) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 34;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.moveRule = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint8 viewRange, uint8 attack, string memory moveRule) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(moveRule).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(viewRange, attack, _encodedLengths.unwrap(), bytes((moveRule)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 tokenId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
